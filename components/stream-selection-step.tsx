"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { FileCheck, Shield, ArrowRight } from "lucide-react"
import { cn } from "@/lib/utils"
import type { StreamType } from "@/app/page"

interface StreamSelectionStepProps {
  onStreamSelected: (stream: StreamType) => void
  selectedStream: StreamType | null
}

const streamOptions = [
  {
    type: "business" as StreamType,
    title: "Test Cases K·ªãch B·∫£n Nghi·ªáp V·ª•",
    description: "T·∫°o test cases to√†n di·ªán cho k·ªãch b·∫£n nghi·ªáp v·ª• t·ª´ t√†i li·ªáu y√™u c·∫ßu, thi·∫øt k·∫ø chi ti·∫øt API v√† t√≠ch h·ª£p h·ªá th·ªëng",
    icon: FileCheck,
    color: "bg-blue-50 border-blue-200 hover:bg-blue-100",
    badgeColor: "bg-blue-100 text-blue-800",
    features: ["Ph√¢n t√≠ch t√†i li·ªáu nghi·ªáp v·ª•", "Ki·ªÉm th·ª≠ thi·∫øt k·∫ø chi ti·∫øt API", "Ki·ªÉm th·ª≠ t√≠ch h·ª£p", "Quy tr√¨nh ƒëa t√†i li·ªáu"],
    requirements: {
      files: "Y√™u c·∫ßu 1-3 t√†i li·ªáu",
      types: [
        { name: "üìã Y√™u C·∫ßu Nghi·ªáp V·ª•", required: true, description: "T√†i li·ªáu ƒë·∫∑c t·∫£ ch√≠nh" },
        { name: "üîß Thi·∫øt K·∫ø Chi Ti·∫øt K·ªπ Thu·∫≠t", required: true, description: "T√†i li·ªáu API v√† endpoints" },
        { name: "üîó H∆∞·ªõng D·∫´n T√≠ch H·ª£p", required: false, description: "T√†i li·ªáu t√≠ch h·ª£p h·ªá th·ªëng (t√πy ch·ªçn, cho ph√©p nhi·ªÅu t√†i li·ªáu)" }
      ]
    },
    workflow: "ƒêa t√†i li·ªáu ‚Üí Chuy·ªÉn ƒë·ªïi ‚Üí T·∫°o test cases nghi·ªáp v·ª•",
    idealFor: "·ª®ng d·ª•ng nghi·ªáp v·ª• ph·ª©c t·∫°p v·ªõi nhi·ªÅu API v√† t√≠ch h·ª£p"
  },
  {
    type: "validation" as StreamType,
    title: "Test Cases Ki·ªÉm Th·ª≠ K·ªπ Thu·∫≠t",
    description: "T·∫°o test cases ki·ªÉm th·ª≠ k·ªπ thu·∫≠t t·ª´ m·ªôt t√†i li·ªáu cho vi·ªác x√°c th·ª±c d·ªØ li·ªáu v√† ki·ªÉm tra ƒë·∫ßu v√†o",
    icon: Shield,
    color: "bg-green-50 border-green-200 hover:bg-green-100",
    badgeColor: "bg-green-100 text-green-800",
    features: ["Ki·ªÉm th·ª≠ m·ªôt t√†i li·ªáu", "X√°c th·ª±c ƒë·∫ßu v√†o", "Ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu", "Ki·ªÉm th·ª≠ nhanh"],
    requirements: {
      files: "Ch·ªâ 1 t√†i li·ªáu",
      types: [
        { name: "‚úÖ T√†i Li·ªáu Ki·ªÉm Th·ª≠", required: true, description: "B·∫•t k·ª≥ t√†i li·ªáu n√†o ƒë·ªÉ ki·ªÉm th·ª≠ k·ªπ thu·∫≠t" }
      ]
    },
    workflow: "M·ªôt t√†i li·ªáu ‚Üí Chuy·ªÉn ƒë·ªïi ‚Üí T·∫°o test cases ki·ªÉm th·ª≠",
    idealFor: "K·ªãch b·∫£n ki·ªÉm th·ª≠ ƒë∆°n gi·∫£n v√† x√°c th·ª±c ƒë·∫ßu v√†o"
  },
]

export function StreamSelectionStep({ onStreamSelected, selectedStream }: StreamSelectionStepProps) {
  return (
    <Card>
      <CardHeader className="text-center">
        <CardTitle>Ch·ªçn Lu·ªìng Test Case</CardTitle>
        <CardDescription>Ch·ªçn lo·∫°i test cases b·∫°n mu·ªën t·∫°o t·ª´ t√†i li·ªáu HTML c·ªßa m√¨nh</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid md:grid-cols-2 gap-6">
          {streamOptions.map((option) => {
            const Icon = option.icon
            const isSelected = selectedStream === option.type

            return (
              <div
                key={option.type}
                className={cn(
                  "relative border-2 rounded-lg p-6 cursor-pointer transition-all",
                  option.color,
                  isSelected && "ring-2 ring-primary ring-offset-2",
                )}
                onClick={() => onStreamSelected(option.type)}
              >
                <div className="flex items-start space-x-4">
                  <div className="flex-shrink-0">
                    <Icon className="h-8 w-8 text-primary" />
                  </div>
                  <div className="flex-1 space-y-3">
                    <div>
                      <h3 className="font-semibold text-lg">{option.title}</h3>
                      <Badge variant="secondary" className={option.badgeColor}>
                        {option.type.charAt(0).toUpperCase() + option.type.slice(1)}
                      </Badge>
                    </div>
                    <p className="text-muted-foreground text-sm">{option.description}</p>
                    
                    {/* File Requirements */}
                    <div className="bg-white/50 rounded-md p-3 space-y-2">
                      <div className="text-xs font-medium text-gray-700">Y√™u C·∫ßu T√†i Li·ªáu:</div>
                      <div className="text-xs text-blue-600 font-medium">{option.requirements.files}</div>
                      <div className="space-y-1">
                        {option.requirements.types.map((fileType, idx) => (
                          <div key={idx} className="text-xs text-gray-600 flex items-center">
                            <div className="w-1.5 h-1.5 bg-primary rounded-full mr-2 flex-shrink-0" />
                            <span className="font-medium">{fileType.name}</span>
                            {fileType.required && <span className="text-red-500 ml-1">*</span>}
                            <span className="ml-2 text-gray-500">- {fileType.description}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    {/* Workflow */}
                    <div className="bg-gray-50 rounded-md p-2">
                      <div className="text-xs font-medium text-gray-700 mb-1">Quy Tr√¨nh:</div>
                      <div className="text-xs text-gray-600">{option.workflow}</div>
                    </div>
                    
                    {/* Ideal For */}
                    <div className="text-xs text-gray-600">
                      <span className="font-medium">Ph√π h·ª£p cho:</span> {option.idealFor}
                    </div>
                    
                    <ul className="space-y-1">
                      {option.features.map((feature, index) => (
                        <li key={index} className="text-sm text-muted-foreground flex items-center">
                          <div className="w-1.5 h-1.5 bg-primary rounded-full mr-2" />
                          {feature}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                {isSelected && (
                  <div className="absolute top-4 right-4">
                    <div className="w-6 h-6 bg-primary rounded-full flex items-center justify-center">
                      <ArrowRight className="h-3 w-3 text-primary-foreground" />
                    </div>
                  </div>
                )}
              </div>
            )
          })}
        </div>

        {selectedStream && (
          <div className="flex justify-center pt-4">
            <Button onClick={() => onStreamSelected(selectedStream)} className="min-w-40">
              Ti·∫øp T·ª•c v·ªõi Lu·ªìng {selectedStream === "business" ? "Nghi·ªáp V·ª•" : "Ki·ªÉm Th·ª≠"}
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
